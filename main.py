import pymssql
import pandas as pd
import matplotlib.pyplot as plt
from datetime import date

mssql_dict = dict()

mssql_dict["server"] = "capdstest.database.windows.net"
mssql_dict["database"] = "DSTest"
mssql_dict["user"] = "candidate"
mssql_dict["pwd"] = "P)pE8J%XYVdv)4k_K%8]v@f)"

# Connect to SQL
conn = pymssql.connect(mssql_dict["server"], mssql_dict["user"],
                       mssql_dict["pwd"], mssql_dict["database"])


def generate_dataframe(sql):
    with conn.cursor() as cursor:
        cursor.execute(sql)
        data = cursor.fetchall()
        column_names = [item[0] for item in cursor.description]
        df = pd.DataFrame(list(data), columns=column_names)
    return df


# Question 1: Average revenue by the day of the week
sql_avg_renvenue = '''
                select
                    'Y' + CAST(YEAR(Date) AS varchar) + 'Q' + CAST(DATEPART(
                        quarter, Date) AS varchar) AS YearQuarter,
                    CAST(DATENAME(weekday, Date) AS varchar) AS DayName,
                    ROUND(AVG(CAST(Revenue AS float)), 2) AS AvgRevenue
                from dbo.Activity
                group by
                    'Y' + CAST(YEAR(Date) AS varchar) + 'Q'
                        + CAST(DATEPART(quarter, Date) AS varchar),
                    CAST(DATENAME(weekday, Date) AS varchar)
                order by
                    'Y' + CAST(YEAR(Date) AS varchar) + 'Q'
                        + CAST(DATEPART(quarter, Date) AS varchar)
                '''


def plot_avg_revenue(sql):
    df = generate_dataframe(sql)
    df = df.pivot(index="YearQuarter",
                  columns="DayName",
                  values="AvgRevenue")
    Time = df.index

    plt.figure(figsize=(7, 10))
    ax1 = plt.subplot(711)
    plt.plot(Time, df.Monday, label='Monday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=False)

    plt.subplot(712, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Tuesday, label='Tuesday')
    plt.legend(loc='upper right')
    plt.tick_params(axis='x', labelbottom=False)

    plt.subplot(713, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Wednesday, label='Wednesday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=False)

    plt.subplot(714, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Thursday, label='Thursday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=False)

    plt.subplot(715, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Friday, label='Friday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=False)

    plt.subplot(716, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Saturday, label='Saturday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=False)

    plt.subplot(717, sharex=ax1, sharey=ax1)
    plt.plot(Time, df.Sunday, label='Sunday')
    plt.legend(loc='upper right')
    plt.tick_params('x', labelbottom=True)

    plt.xlim(0, 5.0)
    plt.show()
    plt.savefig('graph/Average Revenue.png')


# Question 2: Distribution of revenue generated by user age
sql_age_distribution = '''
                select
                    a.UserId AS UID,
                    ROUND(SUM(CAST(a.Revenue AS float)), 2) AS TotRevenue,
                    u.DOB AS DOB
                from dbo.Activity AS a
                join dbo.Users AS u
                on a.UserID = u.UserID
                group by a.UserID, u.DOB
                '''


def age_group(DOB):
    Age_group = []
    for birthday in DOB:
        today = date.today()
        age = today.year - birthday.year - \
            ((today.month, today.day) < (birthday.month, birthday.day))
        if age <= 24:
            Age_group.append("Up to 24")
        elif age <= 44:
            Age_group.append("25-44")
        elif age <= 64:
            Age_group.append("45-64")
        else:
            Age_group.append("65 and over")
    return Age_group


def plot_age_distribution(sql):
    df = generate_dataframe(sql)
    df['AgeGroup'] = age_group(df.DOB)
    df = df[['AgeGroup', 'TotRevenue', 'UID']]

    plt.figure(figsize=(10, 12))
    df_user = df[['AgeGroup', 'UID']].groupby('AgeGroup').UID.count()
    df_user.plot(kind="bar", label='Number of users', legend=True)

    plt.ylim([0, 7000])

    df_renvenue = df[['AgeGroup', 'TotRevenue']
                     ].groupby('AgeGroup').TotRevenue.mean()
    df_renvenue.plot(secondary_y=True,
                     label='Renvenue generated per user', legend=True)

    plt.show()
    plt.savefig('graph/Age Group Distribution.png')


# Question 3: Number of users by year-month
sql_user_yearmonth = '''
                select
                        CAST(YEAR(Date) AS varchar) + '-' + RIGHT('0'
                            + CAST(MONTH(Date) AS varchar), 2) AS YearMonth,
                        COUNT_BIG(UserId) AS NumberofUsers
                    from dbo.Activity
                    where (Revenue >= 0)
                    group by CAST(YEAR(Date) AS varchar) + '-' + RIGHT('0'
                            + CAST(MONTH(Date) AS varchar), 2)
                    order by CAST(YEAR(Date) AS varchar) + '-' + RIGHT('0'
                            + CAST(MONTH(Date) AS varchar), 2)
                '''


def plot_user_yearmonth(sql):
    df = generate_dataframe(sql)

    plt.figure(figsize=(12, 5))
    plt.plot(df.YearMonth, df.NumberofUsers)

    plt.show()
    plt.savefig('graph/Users by Year-Month.png')


# Question 4: Response rate
sql_response_rate = '''
                select
                        c.UserId,
                        (select Name from dbo.Offers AS o
                            where o.OfferId = c.OfferId) AS OfferName,
                        c.OfferId,
                        c.SendDate,
                        (select ROUND(SUM(CAST(a.Revenue AS float)), 2)
                            from dbo.Activity AS a
                            where a.UserId = c.UserId
                                and (a.Date = c.SendDate
                                or a.Date = DATEADD(day, 1, c.SendDate))
                        ) AS TotRevenue
                    from dbo.Comms as c
                    group by c.UserId, c.OfferId, c.SendDate
                '''


def plot_response_rate(sql):
    df = generate_dataframe(sql)

    df = df[['UserId', 'OfferName', 'TotRevenue']]

    OfferSent = df[['UserId', 'OfferName']].groupby('OfferName').count()

    OfferResponded = df[['TotRevenue', 'OfferName']].groupby(
        'OfferName').agg({'TotRevenue': lambda x: x.notnull().sum()})

    df = OfferResponded.TotRevenue/OfferSent.UserId

    plt.figure(figsize=(12, 5))
    plt.plot(df)

    plt.show()
    plt.savefig('graph/Response Rate.png')


# Plot graphs
plot_avg_revenue(sql_avg_renvenue)
plot_age_distribution(sql_age_distribution)
plot_user_yearmonth(sql_user_yearmonth)
plot_response_rate(sql_response_rate)
